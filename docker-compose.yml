version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_agent_memory_postgres
    environment:
      POSTGRES_DB: ai_agent_memory
      POSTGRES_USER: ai_agent_user
      POSTGRES_PASSWORD: ai_agent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_agent_user -d ai_agent_memory"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai_agent_memory_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chroma Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: ai_agent_memory_chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Agent Memory Router API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ai_agent_memory_api
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ai_agent_user:ai_agent_password@postgres:5432/ai_agent_memory
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server
  mcp:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    container_name: ai_agent_memory_mcp
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ai_agent_user:ai_agent_password@postgres:5432/ai_agent_memory
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai_agent_memory_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - mcp
    networks:
      - ai_agent_network

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_agent_memory_prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai_agent_network

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai_agent_memory_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - ai_agent_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_agent_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
