services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai_agent_memory_redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Agent Memory Router API (with SQLite)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_agent_memory_api
    user: "501:501"  # Use host user ID to match volume permissions
    environment:
      - ENVIRONMENT=development
      - DATABASE_TYPE=sqlite
      - DATABASE_URL=sqlite+aiosqlite:////app/data/ai_agent_memory.db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - WEAVIATE_API_URL=http://weaviate:8080
    volumes:
      - ./data:/app/data
      - ./app:/app/app:ro  # Read-only for development
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server (with SQLite)
  mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_agent_memory_mcp
    user: "501:501"  # Use host user ID to match volume permissions
    environment:
      - ENVIRONMENT=development
      - DATABASE_TYPE=sqlite
      - DATABASE_URL=sqlite+aiosqlite:////app/data/ai_agent_memory.db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - MCP_SERVER=true
      - MCP_PORT=8001
      - WEAVIATE_API_URL=http://weaviate:8080
    volumes:
      - ./data:/app/data
      - ./app:/app/app:ro  # Read-only for development
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["python", "-c", "import asyncio; from app.core.mcp_server import start_mcp_server; asyncio.run(start_mcp_server())"]



volumes:
  redis_data:
    driver: local

networks:
  ai_agent_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
